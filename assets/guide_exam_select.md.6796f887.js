import{_ as a,o as n,c as l,O as p}from"./chunks/framework.58a9e095.js";const e="/assets/find_element.1a2e8b50.png",u=JSON.parse('{"title":"选择器进阶","description":"","frontmatter":{},"headers":[],"relativePath":"guide/exam/select.md","filePath":"guide/exam/select.md","lastUpdated":1729501740000}'),o={name:"guide/exam/select.md"};function t(c,s,r,y,i,d){return n(),l("div",null,s[0]||(s[0]=[p('<h1 id="选择器进阶" tabindex="-1">选择器进阶 <a class="header-anchor" href="#选择器进阶" aria-label="Permalink to &quot;选择器进阶&quot;">​</a></h1><p>ui测试中最重要的内容是进行稳定的元素定位，想要做好这部分工作，需要一些基础的前端功底，了解基本的<code>xml</code>的理论知识。 以下内容默认用户已经看完啦<a href="https://www.runoob.com/xml/xml-intro.html" target="_blank" rel="noreferrer">xml基础</a>知识的前提</p><h2 id="页面结构和定位调试" tabindex="-1">页面结构和定位调试 <a class="header-anchor" href="#页面结构和定位调试" aria-label="Permalink to &quot;页面结构和定位调试&quot;">​</a></h2><p>在讲解之前需要用户学会<a href="https://jingyan.baidu.com/article/ab69b270835e026da6189f31.html" target="_blank" rel="noreferrer">打开chrome调试工具</a>, 当用户打开调试工具后在最上方选择<code>element</code>即可对页面的xml层级元素进行调试啦。</p><p>在调试工具页面中按下<code>ctrl + f</code> 将会出现一个输入框，在输入框输入标准选择器<code>(xpath or css selector)</code>，如果有匹配元素将会高亮显示， 通过查看高亮元素即可，确定定位方式是否准确。</p><p style="text-align:center;"><img src="'+e+`"></p><h2 id="xpath-选择器" tabindex="-1">xpath 选择器 <a class="header-anchor" href="#xpath-选择器" aria-label="Permalink to &quot;xpath 选择器&quot;">​</a></h2><p>很多人对xpath可能并不陌生，但大多只了解xpath的基础定位方式,例如全路径定位<code>/html/body/div/p/span</code> 其实xpath支持很多定位方式，模糊以及动态定位，且编写，测试相对容易,因此<code>重点推荐使用</code>。</p><p>以下理解需要<a href="https://www.runoob.com/xpath/xpath-syntax.html" target="_blank" rel="noreferrer">xpath基础</a>，不了解的可以先行学习</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"></span>
<span class="line"><span style="color:#B392F0;">//label[text</span><span style="color:#E1E4E8;">()=</span><span style="color:#9ECBFF;">&quot;活动名称&quot;</span><span style="color:#E1E4E8;">]    </span><span style="color:#6A737D;"># 根据文本内容匹配元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//label[string</span><span style="color:#E1E4E8;">()=</span><span style="color:#9ECBFF;">&quot;活动名称&quot;</span><span style="color:#E1E4E8;">]    </span><span style="color:#6A737D;"># 根据包含内容匹配子元素- 容易匹配多个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//div[contains(@class,</span><span style="color:#B392F0;">&quot;a&quot;</span><span style="color:#E1E4E8;">)]  </span><span style="color:#6A737D;"># 模糊匹配包含class的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//div[contains(@class,</span><span style="color:#B392F0;">&quot;a&quot;</span><span style="color:#E1E4E8;">) or contains(</span><span style="color:#B392F0;">@class,</span><span style="color:#B392F0;">&quot;b&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 模糊匹配 or 范围元素</span></span>
<span class="line"><span style="color:#B392F0;">//div[contains(@class,</span><span style="color:#B392F0;">&quot;a&quot;</span><span style="color:#E1E4E8;">) and contains(</span><span style="color:#B392F0;">@class,</span><span style="color:#B392F0;">&quot;b&quot;</span><span style="color:#E1E4E8;">)  </span><span style="color:#6A737D;"># 模糊匹配 and 范围元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//label[@title</span><span style="color:#E1E4E8;">=</span><span style="color:#B392F0;">&quot;活动期限：&quot;</span><span style="color:#B392F0;">]/parent</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 根据子元素匹配父元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">//label[@title</span><span style="color:#E1E4E8;">=</span><span style="color:#B392F0;">&quot;活动期限：&quot;</span><span style="color:#B392F0;">]/parent::*/parent::*//input</span><span style="color:#E1E4E8;">  </span><span style="color:#6A737D;"># 根据元素属性相对路径匹配父子元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">(</span><span style="color:#B392F0;">//label[@title</span><span style="color:#E1E4E8;">=</span><span style="color:#B392F0;">&quot;活动期限：&quot;</span><span style="color:#B392F0;">]/parent::*/parent::*//input</span><span style="color:#E1E4E8;">)[</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">]  </span><span style="color:#6A737D;"># 根据匹配重复元素下标来定位单个元素</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//label[text</span><span style="color:#24292E;">()=</span><span style="color:#032F62;">&quot;活动名称&quot;</span><span style="color:#24292E;">]    </span><span style="color:#6A737D;"># 根据文本内容匹配元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//label[string</span><span style="color:#24292E;">()=</span><span style="color:#032F62;">&quot;活动名称&quot;</span><span style="color:#24292E;">]    </span><span style="color:#6A737D;"># 根据包含内容匹配子元素- 容易匹配多个</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//div[contains(@class,</span><span style="color:#6F42C1;">&quot;a&quot;</span><span style="color:#24292E;">)]  </span><span style="color:#6A737D;"># 模糊匹配包含class的元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//div[contains(@class,</span><span style="color:#6F42C1;">&quot;a&quot;</span><span style="color:#24292E;">) or contains(</span><span style="color:#6F42C1;">@class,</span><span style="color:#6F42C1;">&quot;b&quot;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 模糊匹配 or 范围元素</span></span>
<span class="line"><span style="color:#6F42C1;">//div[contains(@class,</span><span style="color:#6F42C1;">&quot;a&quot;</span><span style="color:#24292E;">) and contains(</span><span style="color:#6F42C1;">@class,</span><span style="color:#6F42C1;">&quot;b&quot;</span><span style="color:#24292E;">)  </span><span style="color:#6A737D;"># 模糊匹配 and 范围元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//label[@title</span><span style="color:#24292E;">=</span><span style="color:#6F42C1;">&quot;活动期限：&quot;</span><span style="color:#6F42C1;">]/parent</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 根据子元素匹配父元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">//label[@title</span><span style="color:#24292E;">=</span><span style="color:#6F42C1;">&quot;活动期限：&quot;</span><span style="color:#6F42C1;">]/parent::*/parent::*//input</span><span style="color:#24292E;">  </span><span style="color:#6A737D;"># 根据元素属性相对路径匹配父子元素</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">(</span><span style="color:#6F42C1;">//label[@title</span><span style="color:#24292E;">=</span><span style="color:#6F42C1;">&quot;活动期限：&quot;</span><span style="color:#6F42C1;">]/parent::*/parent::*//input</span><span style="color:#24292E;">)[</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">]  </span><span style="color:#6A737D;"># 根据匹配重复元素下标来定位单个元素</span></span></code></pre></div><p><code>xpath</code>使用方式众多，以上不过是对常用的一些举例， 指令函数之间支持组合使用, 更多使用方式可以在学习中理解。</p><h2 id="其他定位方式" tabindex="-1">其他定位方式 <a class="header-anchor" href="#其他定位方式" aria-label="Permalink to &quot;其他定位方式&quot;">​</a></h2><p>通常情况xapth足以满足所有业务场景使用，无需使用其他定位方式。 但是如果对代码有洁癖的同学，也提供其他的定位方式作为补充</p><p>详情见 <a href="https://playwright.dev/docs/selectors" target="_blank" rel="noreferrer">selectors定位器介绍</a></p><p>这些定位器不一定是浏览器支持的标准，例如<code>text=Log in</code> 这类文本定位器， 是通过<code>xpath</code>或<code>selector</code>等标准定位器， 解析转化而来，以达到简化代码量，降低理解门槛等目的。</p><p>因此这类定位方式并不支持在浏览器中调试。</p><h2 id="原生定位方式" tabindex="-1">原生定位方式 <a class="header-anchor" href="#原生定位方式" aria-label="Permalink to &quot;原生定位方式&quot;">​</a></h2><p>除了以上定位方式外，原生定位方式通常使用较少，但是这类方式更加灵活，同时需要编写人员具有一定js基础</p><p>可以通过以下方式来使用原生定位</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">id</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;">  </span><span style="color:#F97583;">await</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">execJavaScript</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`</span></span>
<span class="line"><span style="color:#9ECBFF;">    document.getElementById(&quot;kd&quot;).id</span></span>
<span class="line"><span style="color:#9ECBFF;">\`</span><span style="color:#E1E4E8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// document.getElementsByTagName  通过标签名获取元素</span></span>
<span class="line"><span style="color:#6A737D;">// document.getElementsByClassName 通过元素属性获取</span></span>
<span class="line"><span style="color:#6A737D;">// document.querySelector();  通过selector 选择器获取元素</span></span>
<span class="line"><span style="color:#6A737D;">// document.getElementsByName  通过元素名称获取</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">id</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;">  </span><span style="color:#D73A49;">await</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">execJavaScript</span><span style="color:#24292E;">(</span><span style="color:#032F62;">\`</span></span>
<span class="line"><span style="color:#032F62;">    document.getElementById(&quot;kd&quot;).id</span></span>
<span class="line"><span style="color:#032F62;">\`</span><span style="color:#24292E;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// document.getElementsByTagName  通过标签名获取元素</span></span>
<span class="line"><span style="color:#6A737D;">// document.getElementsByClassName 通过元素属性获取</span></span>
<span class="line"><span style="color:#6A737D;">// document.querySelector();  通过selector 选择器获取元素</span></span>
<span class="line"><span style="color:#6A737D;">// document.getElementsByName  通过元素名称获取</span></span></code></pre></div><p>想了解全部的原生定位方式可以通过查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document#getElementsByClassName" target="_blank" rel="noreferrer">mdn document</a> 来学习</p>`,21)]))}const h=a(o,[["render",t]]);export{u as __pageData,h as default};
