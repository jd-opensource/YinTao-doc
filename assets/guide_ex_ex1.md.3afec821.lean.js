import{_ as e,v as a,b as i,R as t}from"./chunks/framework.caa0fbaf.js";const f=JSON.parse('{"title":"实现原理","description":"","frontmatter":{},"headers":[],"relativePath":"guide/ex/ex1.md","filePath":"guide/ex/ex1.md","lastUpdated":1690970342000}'),l={name:"guide/ex/ex1.md"},s=t('<h1 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h1><h2 id="录制原理" tabindex="-1">录制原理 <a class="header-anchor" href="#录制原理" aria-label="Permalink to &quot;录制原理&quot;">​</a></h2><ul><li>通过webview加载目标页面，向目标页面注入js，获取控制权。</li><li>通过js监听用户的行为及操作，将监听的行为转换为匹配的语法。</li><li>将录制生成的语法进行存储生成脚本文件。</li></ul><h2 id="脚本执行原理" tabindex="-1">脚本执行原理 <a class="header-anchor" href="#脚本执行原理" aria-label="Permalink to &quot;脚本执行原理&quot;">​</a></h2><ul><li>读取传输的脚本文件。</li><li>新建一个浏览器进程并通过js解析语法转为指令，将指令分层级通过进行ipc进行传输，层级按照 浏览器&gt;页面&gt; iframe。</li><li>具体页面拿到响应的指令，再将指令转换为具体的js脚本执行，并记录执行数据。</li><li>运行完成后，将执行数据结果返回。</li></ul>',5),r=[s];function o(d,n,h,c,u,_){return a(),i("div",null,r)}const m=e(l,[["render",o]]);export{f as __pageData,m as default};
