import{_ as e,o as a,c as t,Q as o}from"./chunks/framework.e2982a1c.js";const m=JSON.parse('{"title":"指令","description":"","frontmatter":{},"headers":[],"relativePath":"guide/api/instruct.md","filePath":"guide/api/instruct.md","lastUpdated":1705892192000}'),c={name:"guide/api/instruct.md"},d=o('<h1 id="指令" tabindex="-1">指令 <a class="header-anchor" href="#指令" aria-label="Permalink to &quot;指令&quot;">​</a></h1><h2 id="说明" tabindex="-1">说明 <a class="header-anchor" href="#说明" aria-label="Permalink to &quot;说明&quot;">​</a></h2><p><code>YinTao</code> 执行时主要通过解析指令代码执行, 这些内部指令在运行时以被预注册的<code>js</code>函数所替代,这意味着未知的指令无法得到正确的解析。</p><p>同时我们可以使用原生<code>js</code>进行逻辑编写。部分指令生效会有一些限制，这取决于不同页面之间的上下文差异，<code>YinTao</code>对这些工作进行了简化。</p><p>执行时只存在一套上下文，即当前控制的页面。多页面直接操作必须进行手动切换(不建议使用多页面)。</p><p>注意: <code>execJavaScript</code>执行环境仅为当前控制的浏览器页面,而原生的<code>js</code>将在<code>node</code>侧执行。</p>',6),i=[d];function r(s,n,_,p,l,h){return a(),t("div",null,i)}const f=e(c,[["render",r]]);export{m as __pageData,f as default};
